// Code generated by goyacc - DO NOT EDIT.

package sql

import __yyfmt__ "fmt"

import (
	"strconv"
)

type yySymType struct {
	yys            int
	str            string
	strList        []string
	boolean        bool
	fieldType      FieldType
	compareOperate CompareOperate

	stmt     Statement
	stmtList []Statement

	beginStmt    *BeginStmt
	commitStmt   *CommitStmt
	rollbackStmt *RollbackStmt

	createStmt        *CreateStmt
	createTable       *CreateTable
	createField       *CreateField
	createIndex       *CreateIndex
	createTableOption *CreateTableOption

	insertStmt *InsertStmt

	updateStmt  *UpdateStmt
	updateValue map[string]string

	deleteStmt *DeleteStmt

	selectStmt      *SelectStmt
	selectFieldList []*SelectField
	selectWhereList []SelectWhere
	selectOrderList []*SelectOrder
	selectLimit     *SelectLimit
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57378
	yyEofCode = 57344
	AND       = 57367
	ASC       = 57370
	BEGIN     = 57346
	BY        = 57369
	COMMIT    = 57347
	COMP_GE   = 57376
	COMP_LE   = 57375
	COMP_NE   = 57374
	CREATE    = 57349
	DEFAULT   = 57355
	DELETE    = 57362
	DESC      = 57371
	FROM      = 57364
	INDEX     = 57354
	INSERT    = 57357
	INTO      = 57358
	KEY       = 57351
	LIMIT     = 57372
	NOT       = 57352
	NULL      = 57353
	OFFSET    = 57373
	OR        = 57366
	ORDER     = 57368
	PRIMARY   = 57356
	ROLLBACK  = 57348
	SELECT    = 57363
	SET       = 57361
	TABLE     = 57350
	UPDATE    = 57360
	VALUE     = 57359
	VARIABLE  = 57377
	WHERE     = 57365
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -76
)

var (
	yyPrec = map[int]int{
		OR:  0,
		AND: 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
	}

	yyXLAT = map[int]int{
		57377: 0,  // VARIABLE (42x)
		59:    1,  // ';' (38x)
		44:    2,  // ',' (37x)
		41:    3,  // ')' (36x)
		57392: 4,  // Expr (32x)
		57344: 5,  // $end (21x)
		57346: 6,  // BEGIN (21x)
		57347: 7,  // COMMIT (21x)
		57349: 8,  // CREATE (21x)
		57362: 9,  // DELETE (21x)
		57357: 10, // INSERT (21x)
		57348: 11, // ROLLBACK (21x)
		57363: 12, // SELECT (21x)
		57360: 13, // UPDATE (21x)
		57372: 14, // LIMIT (20x)
		57367: 15, // AND (9x)
		57366: 16, // OR (9x)
		57368: 17, // ORDER (9x)
		40:    18, // '(' (8x)
		61:    19, // '=' (6x)
		57355: 20, // DEFAULT (6x)
		57365: 21, // WHERE (6x)
		57364: 22, // FROM (5x)
		57353: 23, // NULL (5x)
		60:    24, // '<' (4x)
		62:    25, // '>' (4x)
		57376: 26, // COMP_GE (4x)
		57375: 27, // COMP_LE (4x)
		57374: 28, // COMP_NE (4x)
		57370: 29, // ASC (3x)
		57383: 30, // CompareOperate (3x)
		57371: 31, // DESC (3x)
		57352: 32, // NOT (3x)
		57405: 33, // SelectWhere (3x)
		57406: 34, // SelectWhereList (3x)
		57380: 35, // Ascend (2x)
		57381: 36, // BeginStmt (2x)
		57382: 37, // CommitStmt (2x)
		57384: 38, // CreateField (2x)
		57385: 39, // CreateIndex (2x)
		57386: 40, // CreatePrimary (2x)
		57387: 41, // CreateStmt (2x)
		57391: 42, // DeleteStmt (2x)
		57354: 43, // INDEX (2x)
		57396: 44, // InsertStmt (2x)
		57356: 45, // PRIMARY (2x)
		57399: 46, // RollbackStmt (2x)
		57401: 47, // SelectLimit (2x)
		57404: 48, // SelectStmt (2x)
		57361: 49, // SET (2x)
		57407: 50, // Stmt (2x)
		57409: 51, // UpdateStmt (2x)
		57359: 52, // VALUE (2x)
		57411: 53, // VaribleList (2x)
		57379: 54, // AllowNull (1x)
		57369: 55, // BY (1x)
		57388: 56, // CreateTable (1x)
		57389: 57, // CreateTableOption (1x)
		57390: 58, // DefaultVal (1x)
		57393: 59, // FieldType (1x)
		57394: 60, // InsertField (1x)
		57395: 61, // InsertFieldList (1x)
		57397: 62, // InsertValue (1x)
		57398: 63, // InsertValueList (1x)
		57358: 64, // INTO (1x)
		57351: 65, // KEY (1x)
		57373: 66, // OFFSET (1x)
		57400: 67, // SelectFieldList (1x)
		57402: 68, // SelectOrder (1x)
		57403: 69, // SelectOrderList (1x)
		57412: 70, // start (1x)
		57408: 71, // StmtList (1x)
		57350: 72, // TABLE (1x)
		57410: 73, // UpdateValue (1x)
		57378: 74, // $default (0x)
		42:    75, // '*' (0x)
		43:    76, // '+' (0x)
		45:    77, // '-' (0x)
		47:    78, // '/' (0x)
		57345: 79, // error (0x)
	}

	yySymNames = []string{
		"VARIABLE",
		"';'",
		"','",
		"')'",
		"Expr",
		"$end",
		"BEGIN",
		"COMMIT",
		"CREATE",
		"DELETE",
		"INSERT",
		"ROLLBACK",
		"SELECT",
		"UPDATE",
		"LIMIT",
		"AND",
		"OR",
		"ORDER",
		"'('",
		"'='",
		"DEFAULT",
		"WHERE",
		"FROM",
		"NULL",
		"'<'",
		"'>'",
		"COMP_GE",
		"COMP_LE",
		"COMP_NE",
		"ASC",
		"CompareOperate",
		"DESC",
		"NOT",
		"SelectWhere",
		"SelectWhereList",
		"Ascend",
		"BeginStmt",
		"CommitStmt",
		"CreateField",
		"CreateIndex",
		"CreatePrimary",
		"CreateStmt",
		"DeleteStmt",
		"INDEX",
		"InsertStmt",
		"PRIMARY",
		"RollbackStmt",
		"SelectLimit",
		"SelectStmt",
		"SET",
		"Stmt",
		"UpdateStmt",
		"VALUE",
		"VaribleList",
		"AllowNull",
		"BY",
		"CreateTable",
		"CreateTableOption",
		"DefaultVal",
		"FieldType",
		"InsertField",
		"InsertFieldList",
		"InsertValue",
		"InsertValueList",
		"INTO",
		"KEY",
		"OFFSET",
		"SelectFieldList",
		"SelectOrder",
		"SelectOrderList",
		"start",
		"StmtList",
		"TABLE",
		"UpdateValue",
		"$default",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57346: "BEGIN",
		57347: "COMMIT",
		57349: "CREATE",
		57362: "DELETE",
		57357: "INSERT",
		57348: "ROLLBACK",
		57363: "SELECT",
		57360: "UPDATE",
		57372: "LIMIT",
		57367: "AND",
		57366: "OR",
		57368: "ORDER",
		57355: "DEFAULT",
		57365: "WHERE",
		57364: "FROM",
		57353: "NULL",
		57376: ">=",
		57375: "<=",
		57374: "!=",
		57370: "ASC",
		57371: "DESC",
		57352: "NOT",
		57354: "INDEX",
		57356: "PRIMARY",
		57361: "SET",
		57359: "VALUE",
		57369: "BY",
		57358: "INTO",
		57351: "KEY",
		57373: "OFFSET",
		57350: "TABLE",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {70, 1},
		2:  {4, 1},
		3:  {53, 1},
		4:  {53, 3},
		5:  {50, 1},
		6:  {50, 1},
		7:  {50, 1},
		8:  {50, 1},
		9:  {50, 1},
		10: {50, 1},
		11: {50, 1},
		12: {50, 1},
		13: {71, 1},
		14: {71, 2},
		15: {54, 0},
		16: {54, 1},
		17: {54, 2},
		18: {58, 0},
		19: {58, 1},
		20: {58, 2},
		21: {58, 2},
		22: {59, 1},
		23: {36, 3},
		24: {37, 2},
		25: {46, 2},
		26: {41, 8},
		27: {56, 1},
		28: {56, 1},
		29: {56, 1},
		30: {56, 3},
		31: {56, 3},
		32: {56, 3},
		33: {38, 4},
		34: {39, 5},
		35: {40, 5},
		36: {57, 0},
		37: {44, 6},
		38: {60, 3},
		39: {61, 0},
		40: {61, 1},
		41: {62, 4},
		42: {63, 0},
		43: {63, 1},
		44: {51, 6},
		45: {73, 3},
		46: {73, 5},
		47: {42, 5},
		48: {35, 0},
		49: {35, 1},
		50: {35, 1},
		51: {30, 1},
		52: {30, 1},
		53: {30, 1},
		54: {30, 1},
		55: {30, 1},
		56: {30, 1},
		57: {48, 4},
		58: {48, 8},
		59: {67, 1},
		60: {67, 3},
		61: {33, 0},
		62: {33, 2},
		63: {34, 3},
		64: {34, 5},
		65: {34, 5},
		66: {34, 5},
		67: {34, 5},
		68: {68, 0},
		69: {68, 3},
		70: {69, 2},
		71: {69, 4},
		72: {47, 0},
		73: {47, 2},
		74: {47, 4},
		75: {47, 4},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [147][]uint16{
		// 0
		{6: 88, 89, 91, 94, 92, 90, 95, 93, 36: 79, 80, 41: 82, 86, 44: 84, 46: 81, 48: 83, 50: 87, 85, 70: 77, 78},
		{5: 76},
		{5: 75, 88, 89, 91, 94, 92, 90, 95, 93, 36: 79, 80, 41: 82, 86, 44: 84, 46: 81, 48: 83, 50: 222, 85},
		{5: 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{5: 70, 70, 70, 70, 70, 70, 70, 70, 70},
		// 5
		{5: 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{5: 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{5: 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{5: 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{5: 65, 65, 65, 65, 65, 65, 65, 65, 65},
		// 10
		{5: 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{5: 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{96, 4: 220},
		{1: 219},
		{1: 218},
		// 15
		{72: 183},
		{64: 166},
		{96, 4: 154},
		{22: 150},
		{96, 4: 98, 67: 97},
		// 20
		{74, 74, 74, 74, 14: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 31: 74, 74, 49: 74},
		{1: 4, 101, 14: 102, 22: 100, 47: 99},
		{1: 17, 17, 14: 17, 22: 17},
		{1: 149},
		{96, 4: 109},
		// 25
		{96, 4: 108},
		{103},
		{1: 3, 104, 66: 105},
		{107},
		{106},
		// 30
		{1: 1},
		{1: 2},
		{1: 16, 16, 14: 16, 22: 16},
		{1: 15, 14: 15, 17: 15, 21: 111, 33: 110},
		{1: 8, 14: 8, 17: 137, 68: 136},
		// 35
		{96, 4: 113, 34: 112},
		{1: 14, 14: 14, 123, 122, 14},
		{19: 114, 24: 115, 116, 118, 117, 119, 30: 120},
		{25},
		{24},
		// 40
		{23},
		{22},
		{21},
		{20},
		{96, 4: 121},
		// 45
		{1: 13, 3: 13, 14: 13, 13, 13, 13},
		{96, 4: 130, 18: 131},
		{96, 4: 124, 18: 125},
		{19: 114, 24: 115, 116, 118, 117, 119, 30: 128},
		{96, 4: 113, 34: 126},
		// 50
		{3: 127, 15: 123, 122},
		{1: 9, 3: 9, 14: 9, 9, 9, 9},
		{96, 4: 129},
		{1: 11, 3: 11, 14: 11, 11, 11, 11},
		{19: 114, 24: 115, 116, 118, 117, 119, 30: 134},
		// 55
		{96, 4: 113, 34: 132},
		{3: 133, 15: 123, 122},
		{1: 10, 3: 10, 14: 10, 10, 10, 10},
		{96, 4: 135},
		{1: 12, 3: 12, 14: 12, 12, 12, 12},
		// 60
		{1: 4, 14: 102, 47: 147},
		{55: 138},
		{96, 4: 140, 69: 139},
		{1: 7, 144, 14: 7},
		{1: 28, 28, 14: 28, 29: 141, 31: 142, 35: 143},
		// 65
		{1: 27, 27, 14: 27},
		{1: 26, 26, 14: 26},
		{1: 6, 6, 14: 6},
		{96, 4: 145},
		{1: 28, 28, 14: 28, 29: 141, 31: 142, 35: 146},
		// 70
		{1: 5, 5, 14: 5},
		{1: 148},
		{5: 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{5: 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{96, 4: 151},
		// 75
		{1: 15, 21: 111, 33: 152},
		{1: 153},
		{5: 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{49: 155},
		{96, 4: 157, 73: 156},
		// 80
		{1: 15, 161, 21: 111, 33: 160},
		{19: 158},
		{96, 4: 159},
		{1: 31, 31, 21: 31},
		{1: 165},
		// 85
		{96, 4: 162},
		{19: 163},
		{96, 4: 164},
		{1: 30, 30, 21: 30},
		{5: 32, 32, 32, 32, 32, 32, 32, 32, 32},
		// 90
		{96, 4: 167},
		{18: 169, 60: 168},
		{52: 177, 62: 176},
		{96, 3: 37, 170, 53: 171, 61: 172},
		{2: 73, 73},
		// 95
		{2: 174, 36},
		{3: 173},
		{52: 38},
		{96, 4: 175},
		{2: 72, 72},
		// 100
		{1: 182},
		{18: 178},
		{96, 3: 34, 170, 53: 179, 63: 180},
		{2: 174, 33},
		{3: 181},
		// 105
		{1: 35},
		{5: 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{96, 4: 184},
		{18: 185},
		{96, 4: 190, 38: 187, 188, 189, 43: 191, 45: 192, 56: 186},
		// 110
		{2: 212, 211},
		{2: 49, 49},
		{2: 48, 48},
		{2: 47, 47},
		{96, 4: 201, 59: 202},
		// 115
		{96, 4: 197},
		{65: 193},
		{18: 194},
		{96, 4: 195},
		{3: 196},
		// 120
		{2: 41, 41},
		{18: 198},
		{96, 4: 199},
		{3: 200},
		{2: 42, 42},
		// 125
		{2: 54, 54, 20: 54, 23: 54, 32: 54},
		{2: 61, 61, 20: 61, 23: 203, 32: 204, 54: 205},
		{2: 60, 60, 20: 60},
		{23: 210},
		{2: 58, 58, 20: 206, 58: 207},
		// 130
		{96, 2: 57, 57, 209, 23: 208},
		{2: 43, 43},
		{2: 56, 56},
		{2: 55, 55},
		{2: 59, 59, 20: 59},
		// 135
		{1: 40, 57: 216},
		{96, 4: 190, 38: 213, 214, 215, 43: 191, 45: 192},
		{2: 46, 46},
		{2: 45, 45},
		{2: 44, 44},
		// 140
		{1: 217},
		{5: 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{5: 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{5: 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{1: 221},
		// 145
		{5: 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{5: 62, 62, 62, 62, 62, 62, 62, 62, 62},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 79

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			str, err := TrimQuote(yyS[yypt-0].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyVAL.str = str
		}
	case 3:
		{
			yyVAL.strList = []string{yyS[yypt-0].str}
		}
	case 4:
		{
			yyVAL.strList = append(yyS[yypt-2].strList, yyS[yypt-0].str)
		}
	case 5:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].beginStmt)
		}
	case 6:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].commitStmt)
		}
	case 7:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].rollbackStmt)
		}
	case 8:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].createStmt)
		}
	case 9:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].selectStmt)
		}
	case 10:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].insertStmt)
		}
	case 11:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].updateStmt)
		}
	case 12:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].deleteStmt)
		}
	case 13:
		{
			yyVAL.stmtList = append(yyVAL.stmtList, yyS[yypt-0].stmt)
		}
	case 14:
		{
			yyVAL.stmtList = append(yyVAL.stmtList, yyS[yypt-0].stmt)
		}
	case 15:
		{
			yyVAL.boolean = true
		}
	case 16:
		{
			yyVAL.boolean = true
		}
	case 17:
		{
			yyVAL.boolean = false
		}
	case 18:
		{
			yyVAL.str = ""
		}
	case 19:
		{
			yyVAL.str = ""
		}
	case 20:
		{
			yyVAL.str = ""
		}
	case 21:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 22:
		{
			t, ok := typeMapping[yyS[yypt-0].str]
			if ok {
				yyVAL.fieldType = t
			} else {
				__yyfmt__.Printf("不支持的数据类型 %s", yyS[yypt-0].str)
				goto ret1
			}
		}
	case 23:
		{
			yyVAL.beginStmt = &BeginStmt{yyS[yypt-1].str}
		}
	case 24:
		{
			yyVAL.commitStmt = &CommitStmt{}
		}
	case 25:
		{
			yyVAL.rollbackStmt = &RollbackStmt{}
		}
	case 26:
		{
			yyVAL.createStmt = &CreateStmt{
				Name:   yyS[yypt-5].str,
				Table:  yyS[yypt-3].createTable,
				Option: yyS[yypt-1].createTableOption,
			}
		}
	case 27:
		{
			yyVAL.createTable = &CreateTable{
				Field: []*CreateField{yyS[yypt-0].createField},
				Index: []*CreateIndex{},
			}
		}
	case 28:
		{
			yyVAL.createTable = &CreateTable{
				Field: []*CreateField{},
				Index: []*CreateIndex{yyS[yypt-0].createIndex},
			}
		}
	case 29:
		{
			yyVAL.createTable = &CreateTable{
				Pk:    yyS[yypt-0].createIndex,
				Field: []*CreateField{},
				Index: []*CreateIndex{},
			}
		}
	case 30:
		{
			yyVAL.createTable.Field = append(yyVAL.createTable.Field, yyS[yypt-0].createField)
		}
	case 31:
		{
			yyVAL.createTable.Index = append(yyVAL.createTable.Index, yyS[yypt-0].createIndex)
		}
	case 32:
		{
			if yyVAL.createTable.Pk == nil {
				yyVAL.createTable.Pk = yyS[yypt-0].createIndex
			} else {
				__yyfmt__.Printf("重复定义主键 %v %v ", yyVAL.createTable.Pk, yyS[yypt-0].createIndex)
				goto ret1
			}
		}
	case 33:
		{
			yyVAL.createField = &CreateField{
				Name:       yyS[yypt-3].str,
				Type:       yyS[yypt-2].fieldType,
				AllowNull:  yyS[yypt-1].boolean,
				DefaultVal: yyS[yypt-0].str,
			}
		}
	case 34:
		{
			yyVAL.createIndex = &CreateIndex{
				Name:  yyS[yypt-3].str,
				Field: yyS[yypt-1].str,
			}
		}
	case 35:
		{
			yyVAL.createIndex = &CreateIndex{
				Pk:    true,
				Field: yyS[yypt-1].str,
			}
		}
	case 36:
		{
			yyVAL.createTableOption = nil
		}
	case 37:
		{
			yyVAL.insertStmt = &InsertStmt{
				Table: yyS[yypt-3].str,
				Field: yyS[yypt-2].strList,
				Value: yyS[yypt-1].strList,
			}
		}
	case 38:
		{
			yyVAL.strList = yyS[yypt-1].strList
		}
	case 39:
		{
			yyVAL.strList = nil
		}
	case 41:
		{
			yyVAL.strList = yyS[yypt-1].strList
		}
	case 42:
		{
			yyVAL.strList = nil
		}
	case 44:
		{
			yyVAL.updateStmt = &UpdateStmt{
				Table: yyS[yypt-4].str,
				Value: yyS[yypt-2].updateValue,
				Where: yyS[yypt-1].selectWhereList,
			}
		}
	case 45:
		{
			yyVAL.updateValue = map[string]string{
				yyS[yypt-2].str: yyS[yypt-0].str,
			}
		}
	case 46:
		{
			yyVAL.updateValue[yyS[yypt-2].str] = yyS[yypt-0].str
		}
	case 47:
		{
			yyVAL.deleteStmt = &DeleteStmt{
				Table: yyS[yypt-2].str,
				Where: yyS[yypt-1].selectWhereList,
			}
		}
	case 48:
		{
			yyVAL.boolean = true
		}
	case 49:
		{
			yyVAL.boolean = true
		}
	case 50:
		{
			yyVAL.boolean = false
		}
	case 51:
		{
			yyVAL.compareOperate = EQ
		}
	case 52:
		{
			yyVAL.compareOperate = LT
		}
	case 53:
		{
			yyVAL.compareOperate = GT
		}
	case 54:
		{
			yyVAL.compareOperate = LE
		}
	case 55:
		{
			yyVAL.compareOperate = GE
		}
	case 56:
		{
			yyVAL.compareOperate = NE
		}
	case 57:
		{
			yyVAL.selectStmt = &SelectStmt{
				Field: yyS[yypt-2].selectFieldList,
				Limit: yyS[yypt-1].selectLimit,
			}
		}
	case 58:
		{
			yyVAL.selectStmt = &SelectStmt{
				Table: yyS[yypt-4].str,
				Field: yyS[yypt-6].selectFieldList,
				Where: yyS[yypt-3].selectWhereList,
				Order: yyS[yypt-2].selectOrderList,
				Limit: yyS[yypt-1].selectLimit,
			}
		}
	case 59:
		{
			yyVAL.selectFieldList = []*SelectField{
				&SelectField{
					Name: yyS[yypt-0].str,
				},
			}
		}
	case 60:
		{
			yyVAL.selectFieldList = append(yyS[yypt-2].selectFieldList, &SelectField{
				Name: yyS[yypt-0].str,
			})
		}
	case 61:
		{
			yyVAL.selectWhereList = nil
		}
	case 62:
		{
			yyVAL.selectWhereList = yyS[yypt-0].selectWhereList
		}
	case 63:
		{
			yyVAL.selectWhereList = []SelectWhere{
				&SelectWhereField{
					Field:   yyS[yypt-2].str,
					Value:   yyS[yypt-0].str,
					Operate: yyS[yypt-1].compareOperate,
				},
			}
		}
	case 64:
		{
			yyS[yypt-1].compareOperate.Negate()
			field := &SelectWhereField{
				Field:   yyS[yypt-2].str,
				Value:   yyS[yypt-0].str,
				Operate: yyS[yypt-1].compareOperate,
			}
			if len(yyVAL.selectWhereList) == 1 {
				yyVAL.selectWhereList[0].Negate()
				yyVAL.selectWhereList = append(yyVAL.selectWhereList, field)
				yyVAL.selectWhereList = []SelectWhere{
					&SelectWhereExpr{
						Negation: true,
						Cnf:      yyVAL.selectWhereList,
					},
				}
			} else {
				yyVAL.selectWhereList = []SelectWhere{
					&SelectWhereExpr{
						Negation: true,
						Cnf: []SelectWhere{
							&SelectWhereExpr{
								Negation: true,
								Cnf:      yyVAL.selectWhereList,
							},
							field,
						},
					},
				}
			}
		}
	case 65:
		{
			yyVAL.selectWhereList = append(yyVAL.selectWhereList, &SelectWhereField{
				Field:   yyS[yypt-2].str,
				Value:   yyS[yypt-0].str,
				Operate: yyS[yypt-1].compareOperate,
			})
		}
	case 66:
		{
			expr := &SelectWhereExpr{
				Negation: true,
				Cnf:      yyS[yypt-1].selectWhereList,
			}
			if len(yyVAL.selectWhereList) == 1 {
				yyVAL.selectWhereList[0].Negate()
				yyVAL.selectWhereList = append(yyVAL.selectWhereList, expr)
				yyVAL.selectWhereList = []SelectWhere{
					&SelectWhereExpr{
						Negation: true,
						Cnf:      yyVAL.selectWhereList,
					},
				}
			} else {
				yyVAL.selectWhereList = []SelectWhere{
					&SelectWhereExpr{
						Negation: true,
						Cnf: []SelectWhere{
							&SelectWhereExpr{
								Negation: true,
								Cnf:      yyVAL.selectWhereList,
							},
							expr,
						},
					},
				}
			}
		}
	case 67:
		{
			yyVAL.selectWhereList = append(yyVAL.selectWhereList, yyS[yypt-1].selectWhereList...)
		}
	case 68:
		{
			yyVAL.selectOrderList = nil
		}
	case 69:
		{
			yyVAL.selectOrderList = yyS[yypt-0].selectOrderList
		}
	case 70:
		{
			yyVAL.selectOrderList = []*SelectOrder{
				&SelectOrder{
					Asc:   yyS[yypt-0].boolean,
					Field: yyS[yypt-1].str,
				},
			}
		}
	case 71:
		{
			yyVAL.selectOrderList = append(yyS[yypt-3].selectOrderList, &SelectOrder{
				Asc:   yyS[yypt-0].boolean,
				Field: yyS[yypt-1].str,
			})
		}
	case 72:
		{
			yyVAL.selectLimit = nil
		}
	case 73:
		{
			limit, err := strconv.Atoi(yyS[yypt-0].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyVAL.selectLimit = &SelectLimit{
				Limit: limit,
			}
		}
	case 74:
		{
			limit, err := strconv.Atoi(yyS[yypt-2].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			offset, err := strconv.Atoi(yyS[yypt-0].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyVAL.selectLimit = &SelectLimit{
				Limit:  limit,
				Offset: offset,
			}
		}
	case 75:
		{
			limit, err := strconv.Atoi(yyS[yypt-2].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			offset, err := strconv.Atoi(yyS[yypt-0].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyVAL.selectLimit = &SelectLimit{
				Limit:  limit,
				Offset: offset,
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
