// Code generated by goyacc - DO NOT EDIT.

package sql

import __yyfmt__ "fmt"

type yySymType struct {
	yys     int
	str     string
	strList []string
	boolean bool

	stmt     Statement
	stmtList []Statement

	createStmt  *CreateStmt
	tableDef    *TableDef
	fieldDef    *FieldDef
	indexDef    *IndexDef
	tableOption *TableOption
	fieldType   FieldType
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57358
	yyEofCode = 57344
	COMP_GE   = 57356
	COMP_LE   = 57355
	COMP_NE   = 57354
	CREATE    = 57346
	DEFAULT   = 57352
	INDEX     = 57351
	KEY       = 57348
	NOT       = 57349
	NULL      = 57350
	PRIMARY   = 57353
	TABLE     = 57347
	VARIABLE  = 57357
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -27
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		41:    0,  // ')' (23x)
		44:    1,  // ',' (23x)
		57357: 2,  // VARIABLE (10x)
		57362: 3,  // Expr (9x)
		57344: 4,  // $end (6x)
		57346: 5,  // CREATE (6x)
		57352: 6,  // DEFAULT (6x)
		57350: 7,  // NULL (5x)
		40:    8,  // '(' (4x)
		57349: 9,  // NOT (3x)
		59:    10, // ';' (2x)
		57360: 11, // CreateStmt (2x)
		57363: 12, // FieldDef (2x)
		57351: 13, // INDEX (2x)
		57365: 14, // IndexDef (2x)
		57353: 15, // PRIMARY (2x)
		57366: 16, // PrimaryDef (2x)
		57367: 17, // Stmt (2x)
		57371: 18, // VaribleList (2x)
		57359: 19, // AllowNull (1x)
		57361: 20, // DefaultValue (1x)
		57364: 21, // FieldType (1x)
		57348: 22, // KEY (1x)
		57372: 23, // start (1x)
		57368: 24, // StmtList (1x)
		57347: 25, // TABLE (1x)
		57369: 26, // TableDef (1x)
		57370: 27, // TableOption (1x)
		57358: 28, // $default (0x)
		57356: 29, // COMP_GE (0x)
		57355: 30, // COMP_LE (0x)
		57354: 31, // COMP_NE (0x)
		57345: 32, // error (0x)
	}

	yySymNames = []string{
		"')'",
		"','",
		"VARIABLE",
		"Expr",
		"$end",
		"CREATE",
		"DEFAULT",
		"NULL",
		"'('",
		"NOT",
		"';'",
		"CreateStmt",
		"FieldDef",
		"INDEX",
		"IndexDef",
		"PRIMARY",
		"PrimaryDef",
		"Stmt",
		"VaribleList",
		"AllowNull",
		"DefaultValue",
		"FieldType",
		"KEY",
		"start",
		"StmtList",
		"TABLE",
		"TableDef",
		"TableOption",
		"$default",
		"COMP_GE",
		"COMP_LE",
		"COMP_NE",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57346: "CREATE",
		57352: "DEFAULT",
		57350: "NULL",
		57349: "NOT",
		57351: "INDEX",
		57353: "PRIMARY",
		57348: "KEY",
		57347: "TABLE",
		57356: ">=",
		57355: "<=",
		57354: "!=",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {23, 1},
		2:  {3, 1},
		3:  {18, 1},
		4:  {18, 3},
		5:  {17, 1},
		6:  {24, 1},
		7:  {24, 2},
		8:  {11, 8},
		9:  {26, 1},
		10: {26, 1},
		11: {26, 1},
		12: {26, 3},
		13: {26, 3},
		14: {26, 3},
		15: {12, 4},
		16: {14, 5},
		17: {16, 5},
		18: {21, 1},
		19: {19, 0},
		20: {19, 1},
		21: {19, 2},
		22: {20, 0},
		23: {20, 1},
		24: {20, 2},
		25: {20, 2},
		26: {27, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [46][]uint8{
		// 0
		{5: 32, 11: 30, 17: 31, 23: 28, 29},
		{4: 27},
		{4: 26, 32, 11: 30, 17: 72},
		{4: 22, 22},
		{4: 21, 21},
		// 5
		{25: 33},
		{2: 34, 35},
		{25, 25, 25, 6: 25, 25, 25, 25},
		{8: 36},
		{2: 34, 41, 12: 38, 42, 39, 43, 40, 26: 37},
		// 10
		{65, 66},
		{18, 18},
		{17, 17},
		{16, 16},
		{2: 34, 56, 21: 55},
		// 15
		{2: 34, 51},
		{22: 44},
		{8: 45},
		{2: 34, 46, 18: 47},
		{24, 24},
		// 20
		{49, 48},
		{2: 34, 50},
		{10, 10},
		{23, 23},
		{8: 52},
		// 25
		{2: 34, 46, 18: 53},
		{54, 48},
		{11, 11},
		{8, 8, 6: 8, 58, 9: 59, 19: 57},
		{9, 9, 6: 9, 9, 9: 9},
		// 30
		{5, 5, 6: 62, 20: 61},
		{7, 7, 6: 7},
		{7: 60},
		{6, 6, 6: 6},
		{12, 12},
		// 35
		{4, 4, 34, 64, 7: 63},
		{3, 3},
		{2, 2},
		{10: 1, 27: 70},
		{2: 34, 41, 12: 67, 42, 68, 43, 69},
		// 40
		{15, 15},
		{14, 14},
		{13, 13},
		{10: 71},
		{4: 19, 19},
		// 45
		{4: 20, 20},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 32

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			str, err := TrimQuote(yyS[yypt-0].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyVAL.str = str
		}
	case 3:
		{
			yyVAL.strList = []string{yyS[yypt-0].str}
		}
	case 4:
		{
			yyVAL.strList = append(yyS[yypt-2].strList, yyS[yypt-0].str)
		}
	case 5:
		{
			yyVAL.stmt = Statement(yyS[yypt-0].createStmt)
		}
	case 6:
		{
			yyVAL.stmtList = append(yyVAL.stmtList, yyS[yypt-0].stmt)
		}
	case 7:
		{
			yyVAL.stmtList = append(yyVAL.stmtList, yyS[yypt-0].stmt)
		}
	case 8:
		{
			yyVAL.createStmt = &CreateStmt{
				TableName:   yyS[yypt-5].str,
				TableDef:    yyS[yypt-3].tableDef,
				TableOption: yyS[yypt-1].tableOption,
			}
		}
	case 9:
		{
			yyVAL.tableDef = &TableDef{
				Field: []*FieldDef{yyS[yypt-0].fieldDef},
				Index: []*IndexDef{},
			}
		}
	case 10:
		{
			yyVAL.tableDef = &TableDef{
				Field: []*FieldDef{},
				Index: []*IndexDef{yyS[yypt-0].indexDef},
			}
		}
	case 11:
		{
			yyVAL.tableDef = &TableDef{
				Field:   []*FieldDef{},
				Index:   []*IndexDef{},
				Primary: yyS[yypt-0].indexDef,
			}
		}
	case 12:
		{
			yyVAL.tableDef.Field = append(yyVAL.tableDef.Field, yyS[yypt-0].fieldDef)
		}
	case 13:
		{
			yyVAL.tableDef.Index = append(yyVAL.tableDef.Index, yyS[yypt-0].indexDef)
		}
	case 14:
		{
			if yyVAL.tableDef.Primary == nil {
				yyVAL.tableDef.Primary = yyS[yypt-0].indexDef
			} else {
				__yyfmt__.Printf("重复定义主键 %v %v ", yyVAL.tableDef.Primary, yyS[yypt-0].indexDef)
				goto ret1
			}
		}
	case 15:
		{
			yyVAL.fieldDef = &FieldDef{
				FieldName:    yyS[yypt-3].str,
				FieldType:    yyS[yypt-2].fieldType,
				AllowNull:    yyS[yypt-1].boolean,
				DefaultValue: yyS[yypt-0].str,
			}
		}
	case 16:
		{
			yyVAL.indexDef = &IndexDef{
				IndexName:  yyS[yypt-3].str,
				IndexField: yyS[yypt-1].strList,
			}
		}
	case 17:
		{
			yyVAL.indexDef = &IndexDef{
				Primary:    true,
				IndexField: yyS[yypt-1].strList,
			}
		}
	case 18:
		{
			t, ok := typeMapping[yyS[yypt-0].str]
			if ok {
				yyVAL.fieldType = t
			} else {
				__yyfmt__.Printf("不支持的数据类型 %s", yyS[yypt-0].str)
				goto ret1
			}
		}
	case 19:
		{
			yyVAL.boolean = true
		}
	case 20:
		{
			yyVAL.boolean = true
		}
	case 21:
		{
			yyVAL.boolean = false
		}
	case 22:
		{
			yyVAL.str = ""
		}
	case 23:
		{
			yyVAL.str = ""
		}
	case 24:
		{
			yyVAL.str = ""
		}
	case 25:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 26:
		{
			yyVAL.tableOption = nil
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
